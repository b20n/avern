import Text.ParserCombinators.Parsec
import System.Environment
import Control.Monad
import System.IO

import Data.Map (Map)
import qualified Data.Map as Map

data LispVal = Atom String
             | List [LispVal]
             | DottedList [LispVal] LispVal
             | Number Integer
             | String String
             | Bool Bool

instance Show LispVal where show = showVal

-- Fun [Code] [ArgList] Argc
data Fun = Fun [Int] [Int] Int

type CEnv = Map String LispVal

symbol :: Parser Char
symbol = oneOf "!#$%&|*+-/:<=>?@^_~"

parseString :: Parser LispVal
parseString = do
  char '"'
  x <- many (noneOf "\"")
  char '"'
  return $ String x

parseAtom :: Parser LispVal
parseAtom = do
  first <- letter <|> symbol
  rest <- many (letter <|> digit <|> symbol)
  let atom = first:rest
  return $ case atom of
    "#t" -> Bool True
    "#f" -> Bool False
    _    -> Atom atom

parseNumber :: Parser LispVal
parseNumber = liftM (Number . read) $ many1 digit

parseList :: Parser LispVal
parseList = do
  skipMany space
  char '('
  x <- liftM List $ sepBy parseExpr spaces
  char ')'
  skipMany space
  return x

parseDottedList :: Parser LispVal
parseDottedList = do
  head <- endBy parseExpr spaces
  tail <- char '.' >> spaces >> parseExpr
  return $ DottedList head tail

parseQuoted :: Parser LispVal
parseQuoted = do
  char '\''
  x <- parseExpr
  return $ List [Atom "quote", x]

parseExpr :: Parser LispVal
parseExpr = parseAtom
         <|> parseString
         <|> parseNumber
         <|> parseQuoted
         <|> parseList

-- Only definitions are valid at the toplevel
-- This is pretty messy; probably possible to define in a nicer manner.
parseTopLevel :: Parser LispVal
parseTopLevel = do
  skipMany space
  char '('
  string "define"
  skipMany space
  name <- parseAtom
  form <- parseList
  skipMany space
  char ')'
  skipMany space
  return $ List [Atom "define", name, form]

showVal :: LispVal -> String
showVal (String contents) = "\"" ++ contents ++ "\""
showVal (Atom name) = name
showVal (Number contents) = show contents
showVal (Bool True) = "#t"
showVal (Bool False) = "#f"
showVal (List contents) = "(" ++ unwordsList contents ++ ")"
showVal (DottedList head tail) = "(" ++ unwordsList head ++ " . " ++ showVal tail ++ ")"

unwordsList :: [LispVal] -> String
unwordsList = unwords . map showVal

lambda :: [LispVal] -> LispVal
lambda (List args : body) = Bool True

define :: [LispVal] -> CEnv -> CEnv
define (Atom name : [(List (Atom "lambda" : rest))]) env = Map.insert name (lambda rest) env

-- At some point this might match on namespaces, or something
compile :: LispVal -> CEnv -> CEnv
compile (List (Atom "define" : rest)) env = define rest env

compileTopLevel :: String -> CEnv -> String
compileTopLevel input env = case parse (many parseTopLevel) "avern" input of
  Right parsed -> show $ foldr compile env parsed
  Left err -> "No match: " ++ show err

cenv :: CEnv
cenv = Map.empty

main :: IO ()
main = do
  args <- getArgs
  forms <- readFile (args !! 0)
  putStrLn $ compileTopLevel forms cenv
